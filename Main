import tkinter as tk
from tkinter import messagebox
from tkinter import simpledialog
from tkinter import ttk
import datetime

class ToDoListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List")

        self.tasks = {}

        self.create_widgets()

    def create_widgets(self):
        self.frame = ttk.Frame(self.root, padding="10")
        self.frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.task_list = tk.Listbox(self.frame, height=15, width=50)
        self.task_list.grid(row=0, column=0, columnspan=4, padx=5, pady=5)

        self.add_button = ttk.Button(self.frame, text="Add Task", command=self.add_task)
        self.add_button.grid(row=1, column=0, padx=5, pady=5)

        self.edit_button = ttk.Button(self.frame, text="Edit Task", command=self.edit_task)
        self.edit_button.grid(row=1, column=1, padx=5, pady=5)

        self.delete_button = ttk.Button(self.frame, text="Delete Task", command=self.delete_task)
        self.delete_button.grid(row=1, column=2, padx=5, pady=5)

        self.reminder_button = ttk.Button(self.frame, text="Set Reminder", command=self.set_reminder)
        self.reminder_button.grid(row=1, column=3, padx=5, pady=5)

        self.check_reminders_button = ttk.Button(self.frame, text="Check Reminders", command=self.check_reminders)
        self.check_reminders_button.grid(row=2, column=0, columnspan=4, padx=5, pady=5)

    def add_task(self):
        task_id = simpledialog.askstring("Task ID", "Enter task ID:")
        description = simpledialog.askstring("Task Description", "Enter task description:")
        priority = simpledialog.askstring("Task Priority", "Enter task priority (high, medium, low):")
        due_date = simpledialog.askstring("Due Date", "Enter due date (YYYY-MM-DD):")

        if task_id and description and priority and due_date:
            due_date = datetime.datetime.strptime(due_date, '%Y-%m-%d').date()
            self.tasks[task_id] = {
                'description': description,
                'priority': priority,
                'due_date': due_date,
                'reminder': None
            }
            self.update_task_list()
        else:
            messagebox.showwarning("Input Error", "Please fill out all fields.")

    def edit_task(self):
        task_id = simpledialog.askstring("Task ID", "Enter task ID to edit:")
        if task_id in self.tasks:
            description = simpledialog.askstring("Task Description", "Enter new task description (leave blank to keep current):")
            priority = simpledialog.askstring("Task Priority", "Enter new task priority (high, medium, low, leave blank to keep current):")
            due_date = simpledialog.askstring("Due Date", "Enter new due date (YYYY-MM-DD, leave blank to keep current):")

            if description:
                self.tasks[task_id]['description'] = description
            if priority:
                self.tasks[task_id]['priority'] = priority
            if due_date:
                self.tasks[task_id]['due_date'] = datetime.datetime.strptime(due_date, '%Y-%m-%d').date()

            self.update_task_list()
        else:
            messagebox.showwarning("Task Not Found", "Task ID not found.")

    def delete_task(self):
        task_id = simpledialog.askstring("Task ID", "Enter task ID to delete:")
        if task_id in self.tasks:
            del self.tasks[task_id]
            self.update_task_list()
        else:
            messagebox.showwarning("Task Not Found", "Task ID not found.")

    def set_reminder(self):
        task_id = simpledialog.askstring("Task ID", "Enter task ID to set reminder:")
        if task_id in self.tasks:
            reminder_date = simpledialog.askstring("Reminder Date", "Enter reminder date (YYYY-MM-DD):")
            if reminder_date:
                self.tasks[task_id]['reminder'] = datetime.datetime.strptime(reminder_date, '%Y-%m-%d').date()
                self.update_task_list()
        else:
            messagebox.showwarning("Task Not Found", "Task ID not found.")

    def check_reminders(self):
        current_date = datetime.datetime.now().date()
        reminders = []
        for task_id, task in self.tasks.items():
            if task['reminder'] and task['reminder'] <= current_date:
                reminders.append(f"Reminder: Task ID {task_id}, Description: {task['description']} is due soon!")
        if reminders:
            messagebox.showinfo("Reminders", "\n".join(reminders))
        else:
            messagebox.showinfo("No Reminders", "No reminders at this time.")

    def update_task_list(self):
        self.task_list.delete(0, tk.END)
        for task_id, task in self.tasks.items():
            self.task_list.insert(tk.END, f"ID: {task_id}, Description: {task['description']}, Priority: {task['priority']}, Due Date: {task['due_date']}, Reminder: {task['reminder']}")

def main():
    root = tk.Tk()
    app = ToDoListApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
